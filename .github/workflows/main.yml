name: workflow

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

env:
  version: 1.0.${{ github.run_number }}

jobs:

  build-project:
    name: Build for macOS
    runs-on: macos-latest
    strategy:
      matrix:
        go-version: ['1.21.x']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go environment
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Check if go.mod exists
        run: test -f go.mod && echo "go.mod already exists" || go mod init

      - name: Install dependencies
        run: go mod tidy

      - name: Run Go tests
        run: go test -json > TestResults-${{ matrix.go-version }}.json

      - name: Upload Go test results as artifact
        uses: actions/upload-artifact@v4
        with:
          name: Go-results-${{ matrix.go-version }}
          path: TestResults-${{ matrix.go-version }}.json

      - name: Compile for macOS
        run: go build -ldflags="-w -s" -o project .

      - name: Upload macOS Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-project
          path: project

  release-project:
    name: Release Project
    runs-on: ubuntu-latest
    needs: build-project
    steps:
      - name: Download macOS Artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-project
          path: project

      - name: Make binary executable
        run: chmod +x project/project

      - name: Test Artifact Download
        run: ls -R

      - name: Archive Project
        uses: thedoctor0/zip-release@master
        with:
          filename: go-project

      - name: Create Release
        id: create-new-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{env.version}}
          release_name: ${{env.version}}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-new-release.outputs.upload_url }}
          asset_path: ./go-project.zip
          asset_name: project-v${{env.version}}.zip
          asset_content_type: application/zip
    
  deploy-to-homebrew:
    name: Deploy release to homebrew
    runs-on: ubuntu-latest
    needs: release-project

    env:
      version: 1.0.${{ github.run_number }}
      release_url: https://github.com/mrbraden56/project/releases/download/1.0.${{ github.run_number }}/project-v1.0.${{ github.run_number }}.zip

    steps:
      - name: Checkout, Edit, and Push
        run: |
          git clone https://github.com/mrbraden56/homebrew-project.git
          cd homebrew-project/Formula
          curl -O ${{ env.release_url }}
          shasum -a 256 project-v${{env.version}}.zip | awk -F"\"" "/sha256/ {hash=$$1; gsub(\$2, hash); print}; !/sha256/ {print \$0}" Project.rb > Project.rb
          awk -F'"' '/url/ {gsub($2, "${{env.release_url}}"); print}; !/url/ {print $0}' Project.rb > Project.rb
      - name: Upload Project.rb
        uses: actions/upload-artifact@v2
        with:
          name: Project.rb
          path: homebrew-project/Formula/Project.rb





      # - name: Build and Push Docker Image
      #   run: |
      #     docker login --username mrbraden56 --password ${{ secrets.GH_PAT }} ghcr.io
      #     docker build . --tag ghcr.io/mrbraden56/project-ghcr:latest
      #     docker push ghcr.io/mrbraden56/project-ghcr:latest

